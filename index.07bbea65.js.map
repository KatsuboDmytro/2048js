{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js","src/modules/Ceil.class.js","src/modules/Tile.class.js"],"sourcesContent":["let $87cceec37ced91bf$var$SCORE = 0;\nclass $87cceec37ced91bf$export$d4a1bccfd52ebd3 {\n    constructor(gridElement, x, y){\n        const cell = document.createElement(\"div\");\n        cell.classList.add(\"field-cell\");\n        gridElement.append(cell);\n        this.x = x;\n        this.y = y;\n        this.score = 0;\n        this.gameScore = document.querySelector(\".game-score\");\n    }\n    linkTile(tile) {\n        tile.setXY(this.x, this.y);\n        this.linkedTile = tile;\n    }\n    unlinkTile() {\n        this.linkedTile = null;\n    }\n    isEmpty() {\n        return !this.linkedTile;\n    }\n    makeAnEmpty() {\n        $87cceec37ced91bf$var$SCORE = 0;\n        this.gameScore.innerHTML = $87cceec37ced91bf$var$SCORE;\n        return this.linkedTile = null;\n    }\n    linkTileForMerge(tile) {\n        tile.setXY(this.x, this.y);\n        this.linkedTileForMerge = tile;\n    }\n    unlinkTileForMerge() {\n        this.linkedTileForMerge = null;\n    }\n    hasTileForMerge() {\n        return !!this.linkedTileForMerge;\n    }\n    canAccept(newTile) {\n        return this.isEmpty() || !this.hasTileForMerge() && this.linkedTile.value === newTile.value;\n    }\n    mergeTiles() {\n        if (this.linkedTile) {\n            const result = this.linkedTile.value + this.linkedTileForMerge.value;\n            this.linkedTile.setValue(result);\n            this.score += result;\n            if ($87cceec37ced91bf$var$SCORE < this.score) {\n                console.log(this.score);\n                $87cceec37ced91bf$var$SCORE = this.score;\n                this.gameScore.textContent = $87cceec37ced91bf$var$SCORE;\n            }\n            if (result >= 2048) {\n                const win = document.querySelector(\".message-win\");\n                win.classList.toggle(\"hidden\");\n            }\n            this.linkedTileForMerge.removeFromDOM();\n            this.unlinkTileForMerge();\n        }\n    }\n}\n\n\nconst $a3a4bece0086b835$var$COLORS = {\n    2: \"#eee4da\",\n    4: \"#ede0c8\",\n    8: \"#f2b179\",\n    16: \"#f59563\",\n    32: \"#f67c5f\",\n    64: \"#f65e3b\",\n    128: \"#edcf72\",\n    256: \"#edcc61\",\n    512: \"#edc850\",\n    1024: \"#edc53f\",\n    2048: \"#edc22e\"\n};\nclass $a3a4bece0086b835$export$235cb65c20ad2b7 {\n    constructor(gridElement){\n        this.tileElement = document.createElement(\"div\");\n        this.tileElement.classList.add(\"tile\");\n        this.setValue(Math.random() > 0.5 ? 2 : 4);\n        gridElement.append(this.tileElement);\n    }\n    setValue(value) {\n        this.value = value;\n        this.tileElement.textContent = value;\n        this.tileElement.style.setProperty(\"--bg-color\", `${$a3a4bece0086b835$var$COLORS[value]}`);\n        this.tileElement.style.setProperty(\"--text-color\", `${value >= 8 ? \"#f9f6f2\" : \"#776e65\"}`);\n    }\n    setXY(x, y) {\n        this.x = x;\n        this.y = y;\n        this.tileElement.style.setProperty(\"--x\", x);\n        this.tileElement.style.setProperty(\"--y\", y);\n    }\n    removeFromDOM() {\n        this.tileElement.remove();\n    }\n    waitForTransitionEnd() {\n        return new Promise((resolve)=>{\n            this.tileElement.addEventListener(\"transitionend\", resolve, {\n                once: true\n            });\n        });\n    }\n    waitForAnimationEnd() {\n        return new Promise((resolve)=>{\n            this.tileElement.addEventListener(\"animationend\", resolve, {\n                once: true\n            });\n        });\n    }\n}\n\n\n\"use strict\";\nconst $a5fd07fa01589658$var$GRID_SIZE = 4;\nconst $a5fd07fa01589658$var$CELLS_COUNT = $a5fd07fa01589658$var$GRID_SIZE * $a5fd07fa01589658$var$GRID_SIZE;\nclass $a5fd07fa01589658$export$985739bfa5723e08 {\n    constructor(gridElement){\n        this.cells = [];\n        for(let i = 0; i < $a5fd07fa01589658$var$CELLS_COUNT; i++)this.cells.push(new (0, $87cceec37ced91bf$export$d4a1bccfd52ebd3)(gridElement, i % $a5fd07fa01589658$var$GRID_SIZE, Math.floor(i / $a5fd07fa01589658$var$GRID_SIZE)));\n        this.score = 0;\n        this.cellsGroupedByColumn = this.groupCellsByColumn();\n        this.cellsGroupedByReversedColumn = this.cellsGroupedByColumn.map((column)=>[\n                ...column\n            ].reverse());\n        this.cellsGroupedByRow = this.groupCellsByRow();\n        this.cellsGroupedByReversedRow = this.cellsGroupedByRow.map((raw)=>[\n                ...raw\n            ].reverse());\n    }\n    getRandomEmptyCell() {\n        const emptyCells = this.cells.filter((cell)=>cell.isEmpty());\n        const randomIndex = Math.floor(Math.random() * emptyCells.length);\n        return emptyCells[randomIndex];\n    }\n    groupCellsByColumn() {\n        return this.cells.reduce((groupedCells, cell)=>{\n            groupedCells[cell.x] = groupedCells[cell.x] || [];\n            groupedCells[cell.x][cell.y] = cell;\n            return groupedCells;\n        }, []);\n    }\n    groupCellsByRow() {\n        return this.cells.reduce((groupedCells, cell)=>{\n            groupedCells[cell.y] = groupedCells[cell.y] || [];\n            groupedCells[cell.y][cell.x] = cell;\n            return groupedCells;\n        }, []);\n    }\n    moveUp() {\n        this.slideTiles(this.cellsGroupedByColumn);\n    }\n    moveDown() {\n        this.slideTiles(this.cellsGroupedByReversedColumn);\n    }\n    moveLeft() {\n        this.slideTiles(this.cellsGroupedByRow);\n    }\n    moveRight() {\n        this.slideTiles(this.cellsGroupedByReversedRow);\n    }\n    canMoveUp() {\n        return this.canMove(this.cellsGroupedByColumn);\n    }\n    canMoveDown() {\n        return this.canMove(this.cellsGroupedByReversedColumn);\n    }\n    canMoveLeft() {\n        return this.canMove(this.cellsGroupedByRow);\n    }\n    canMoveRight() {\n        return this.canMove(this.cellsGroupedByReversedRow);\n    }\n    canMove(groupedCells) {\n        return groupedCells.some((group)=>this.canMoveInGroup(group));\n    }\n    canMoveInGroup(group) {\n        return group.some((cell, index)=>{\n            if (index === 0) return false;\n            if (cell.isEmpty()) return false;\n            const targetCell = group[index - 1];\n            return targetCell.canAccept(cell.linkedTile);\n        });\n    }\n    slideTiles(groupedCells) {\n        const promises = [];\n        groupedCells.forEach((group)=>this.slideTilesInGroup(group, promises));\n        Promise.all(promises);\n        this.cells.forEach((cell)=>{\n            cell.hasTileForMerge() && cell.mergeTiles();\n        });\n    }\n    slideTilesInGroup(group, promises) {\n        for(let i = 1; i < group.length; i++){\n            if (group[i].isEmpty()) continue;\n            const cellWithTile = group[i];\n            let targetCell;\n            let j = i - 1;\n            while(j >= 0 && group[j].canAccept(cellWithTile.linkedTile)){\n                targetCell = group[j];\n                j--;\n            }\n            if (!targetCell) continue;\n            promises.push(cellWithTile.linkedTile.waitForTransitionEnd());\n            if (targetCell.isEmpty()) targetCell.linkTile(cellWithTile.linkedTile);\n            else targetCell.linkTileForMerge(cellWithTile.linkedTile);\n            cellWithTile.unlinkTile();\n        }\n    }\n    start(gridElement) {\n        this.getRandomEmptyCell().linkTile(new (0, $a3a4bece0086b835$export$235cb65c20ad2b7)(gridElement));\n        this.getRandomEmptyCell().linkTile(new (0, $a3a4bece0086b835$export$235cb65c20ad2b7)(gridElement));\n    }\n    restart() {\n        const tiles = document.querySelectorAll(\".tile\");\n        tiles.forEach((tile)=>{\n            tile.remove();\n        });\n        this.cells.forEach((cell)=>cell.unlinkTile());\n    }\n}\n\n\n\n\"use strict\";\nconst $09e991522ca7e64e$var$gridElement = document.getElementById(\"game-field\");\nconst $09e991522ca7e64e$var$lose = document.querySelector(\".message-lose\");\nconst $09e991522ca7e64e$var$start = document.querySelector(\".message-start\");\nconst $09e991522ca7e64e$var$game = new (0, $a5fd07fa01589658$export$985739bfa5723e08)($09e991522ca7e64e$var$gridElement);\nfunction $09e991522ca7e64e$var$setupInputOnce() {\n    document.addEventListener(\"keydown\", $09e991522ca7e64e$var$handleInput, {\n        once: true\n    });\n}\nfunction $09e991522ca7e64e$var$handleInput(event) {\n    switch(event.key){\n        case \"ArrowUp\":\n            if (!$09e991522ca7e64e$var$game.canMoveUp()) {\n                $09e991522ca7e64e$var$setupInputOnce();\n                return;\n            }\n            $09e991522ca7e64e$var$game.moveUp();\n            break;\n        case \"ArrowDown\":\n            if (!$09e991522ca7e64e$var$game.canMoveDown()) {\n                $09e991522ca7e64e$var$setupInputOnce();\n                return;\n            }\n            $09e991522ca7e64e$var$game.moveDown();\n            break;\n        case \"ArrowLeft\":\n            if (!$09e991522ca7e64e$var$game.canMoveLeft()) {\n                $09e991522ca7e64e$var$setupInputOnce();\n                return;\n            }\n            $09e991522ca7e64e$var$game.moveLeft();\n            break;\n        case \"ArrowRight\":\n            if (!$09e991522ca7e64e$var$game.canMoveRight()) {\n                $09e991522ca7e64e$var$setupInputOnce();\n                return;\n            }\n            $09e991522ca7e64e$var$game.moveRight();\n            break;\n        default:\n            $09e991522ca7e64e$var$setupInputOnce();\n            return;\n    }\n    const newTile = new (0, $a3a4bece0086b835$export$235cb65c20ad2b7)($09e991522ca7e64e$var$gridElement);\n    $09e991522ca7e64e$var$game.getRandomEmptyCell().linkTile(newTile);\n    if (!$09e991522ca7e64e$var$game.canMoveUp() && !$09e991522ca7e64e$var$game.canMoveDown() && !$09e991522ca7e64e$var$game.canMoveLeft() && !$09e991522ca7e64e$var$game.canMoveRight()) {\n        newTile.waitForAnimationEnd();\n        $09e991522ca7e64e$var$lose.classList.toggle(\"hidden\");\n        return;\n    }\n    $09e991522ca7e64e$var$setupInputOnce();\n}\nconst $09e991522ca7e64e$var$button = document.querySelector(\".button\");\n$09e991522ca7e64e$var$button.addEventListener(\"click\", ()=>{\n    if ($09e991522ca7e64e$var$button.classList.contains(\"start\")) {\n        $09e991522ca7e64e$var$game.start($09e991522ca7e64e$var$gridElement);\n        $09e991522ca7e64e$var$setupInputOnce();\n        $09e991522ca7e64e$var$button.classList.replace(\"start\", \"restart\");\n        $09e991522ca7e64e$var$button.textContent = \"Restart\";\n        $09e991522ca7e64e$var$start.classList.toggle(\"hidden\");\n    } else {\n        $09e991522ca7e64e$var$game.restart();\n        $09e991522ca7e64e$var$button.classList.replace(\"restart\", \"start\");\n        $09e991522ca7e64e$var$button.textContent = \"Start\";\n        $09e991522ca7e64e$var$start.classList.toggle(\"hidden\");\n    }\n});\n\n\n//# sourceMappingURL=index.07bbea65.js.map\n","'use strict';\r\n\r\nimport { Game } from '../modules/Game.class';\r\nimport { Tile } from '../modules/Tile.class';\r\n\r\nconst gridElement = document.getElementById('game-field');\r\nconst lose = document.querySelector('.message-lose');\r\nconst start = document.querySelector('.message-start');\r\n\r\nconst game = new Game(gridElement);\r\n\r\nfunction setupInputOnce() {\r\n  document.addEventListener('keydown', handleInput, { once: true });\r\n}\r\n\r\nfunction handleInput(event) {\r\n  switch(event.key) {\r\n    case \"ArrowUp\":\r\n      if (!game.canMoveUp()) {\r\n        setupInputOnce();\r\n        return;\r\n      }\r\n      game.moveUp();\r\n      break;\r\n    case \"ArrowDown\":\r\n      if (!game.canMoveDown()) {\r\n        setupInputOnce();\r\n        return;\r\n      }\r\n      game.moveDown();\r\n      break;\r\n    case \"ArrowLeft\":\r\n      if (!game.canMoveLeft()) {\r\n        setupInputOnce();\r\n        return;\r\n      }\r\n      game.moveLeft();\r\n      break;\r\n    case \"ArrowRight\":\r\n      if (!game.canMoveRight()) {\r\n        setupInputOnce();\r\n        return;\r\n      }\r\n      game.moveRight();\r\n      break;\r\n    default:\r\n      setupInputOnce();\r\n      return;\r\n  }\r\n\r\n  const newTile = new Tile(gridElement);\r\n  game.getRandomEmptyCell().linkTile(newTile);\r\n\r\n  if (!game.canMoveUp() && !game.canMoveDown() && !game.canMoveLeft() && !game.canMoveRight()) {\r\n    newTile.waitForAnimationEnd();\r\n    lose.classList.toggle('hidden');\r\n    return;\r\n  }\r\n\r\n  setupInputOnce();\r\n}\r\n\r\nconst button = document.querySelector('.button');\r\n\r\nbutton.addEventListener('click', () => {\r\n  if (button.classList.contains('start')) {\r\n    game.start(gridElement);\r\n    setupInputOnce();\r\n    button.classList.replace('start', 'restart');\r\n    button.textContent = 'Restart';\r\n    start.classList.toggle('hidden');\r\n  } else {\r\n    game.restart();\r\n    button.classList.replace('restart', 'start');\r\n    button.textContent = 'Start';\r\n    start.classList.toggle('hidden');\r\n  }\r\n});\r\n\r\n","'use strict';\r\n\r\nimport { Ceil } from \"./Ceil.class\";\r\nimport { Tile } from \"./Tile.class\";\r\n\r\nconst GRID_SIZE = 4;\r\nconst CELLS_COUNT = GRID_SIZE * GRID_SIZE;\r\n\r\nexport class Game {\r\n  constructor(gridElement) {\r\n    this.cells = [];\r\n    for (let i = 0; i < CELLS_COUNT; i++) {\r\n      this.cells.push(\r\n        new Ceil(gridElement, i % GRID_SIZE, Math.floor(i / GRID_SIZE))\r\n      );\r\n    }\r\n\r\n    this.score = 0;\r\n    this.cellsGroupedByColumn = this.groupCellsByColumn();\r\n    this.cellsGroupedByReversedColumn = this.cellsGroupedByColumn.map(column => [...column].reverse());\r\n    this.cellsGroupedByRow = this.groupCellsByRow();\r\n    this.cellsGroupedByReversedRow = this.cellsGroupedByRow.map(raw => [...raw].reverse());\r\n  }\r\n\r\n  getRandomEmptyCell() {\r\n    const emptyCells = this.cells.filter(cell => cell.isEmpty());\r\n    const randomIndex = Math.floor(Math.random() * emptyCells.length);\r\n    return emptyCells[randomIndex];\r\n  }\r\n\r\n  groupCellsByColumn() {\r\n    return this.cells.reduce((groupedCells, cell) => {\r\n      groupedCells[cell.x] = groupedCells[cell.x] || [];\r\n      groupedCells[cell.x][cell.y] = cell;\r\n      return groupedCells;\r\n    }, []);\r\n  }\r\n\r\n  groupCellsByRow() {\r\n    return this.cells.reduce((groupedCells, cell) => {\r\n      groupedCells[cell.y] = groupedCells[cell.y] || [];\r\n      groupedCells[cell.y][cell.x] = cell;\r\n      return groupedCells;\r\n    }, []);\r\n  }\r\n\r\n  moveUp() {\r\n    this.slideTiles(this.cellsGroupedByColumn);\r\n  }\r\n\r\n  moveDown() {\r\n    this.slideTiles(this.cellsGroupedByReversedColumn);\r\n  }\r\n\r\n  moveLeft() {\r\n    this.slideTiles(this.cellsGroupedByRow);\r\n  }\r\n\r\n  moveRight() {\r\n    this.slideTiles(this.cellsGroupedByReversedRow);\r\n  }\r\n\r\n  canMoveUp() {\r\n    return this.canMove(this.cellsGroupedByColumn);\r\n  }\r\n\r\n  canMoveDown() {\r\n    return this.canMove(this.cellsGroupedByReversedColumn);\r\n  }\r\n\r\n  canMoveLeft() {\r\n    return this.canMove(this.cellsGroupedByRow);\r\n  }\r\n\r\n  canMoveRight() {\r\n    return this.canMove(this.cellsGroupedByReversedRow);\r\n  }\r\n\r\n  canMove(groupedCells) {\r\n    return groupedCells.some(group =>  this.canMoveInGroup(group));\r\n  }\r\n\r\n  canMoveInGroup(group) {\r\n    return group.some((cell, index) => {\r\n      if (index === 0) {\r\n        return false;\r\n      }\r\n\r\n      if (cell.isEmpty()) {\r\n        return false;\r\n      }\r\n\r\n      const targetCell = group[index - 1];\r\n      return targetCell.canAccept(cell.linkedTile);\r\n    });\r\n  }\r\n\r\n  slideTiles(groupedCells) {\r\n    const promises = [];\r\n\r\n    groupedCells.forEach(group => this.slideTilesInGroup(group, promises));\r\n\r\n    Promise.all(promises);\r\n    this.cells.forEach(cell => {\r\n      cell.hasTileForMerge() && cell.mergeTiles()\r\n    });\r\n  }\r\n\r\n  slideTilesInGroup(group, promises) {\r\n    for (let i = 1; i < group.length; i++) {\r\n      if (group[i].isEmpty()) {\r\n        continue;\r\n      }\r\n\r\n      const cellWithTile = group[i];\r\n\r\n      let targetCell;\r\n      let j = i - 1;\r\n      while (j >= 0 && group[j].canAccept(cellWithTile.linkedTile)) {\r\n        targetCell = group[j];\r\n        j--;\r\n      }\r\n\r\n      if (!targetCell) {\r\n        continue;\r\n      }\r\n\r\n      promises.push(cellWithTile.linkedTile.waitForTransitionEnd());\r\n\r\n      if (targetCell.isEmpty()) {\r\n        targetCell.linkTile(cellWithTile.linkedTile);\r\n      } else {\r\n        targetCell.linkTileForMerge(cellWithTile.linkedTile);\r\n      }\r\n\r\n      cellWithTile.unlinkTile();\r\n    }\r\n  }\r\n\r\n  start(gridElement) {\r\n    this.getRandomEmptyCell().linkTile(new Tile(gridElement));\r\n    this.getRandomEmptyCell().linkTile(new Tile(gridElement));\r\n  }\r\n\r\n  restart() {\r\n    const tiles = document.querySelectorAll('.tile');\r\n    tiles.forEach(tile => {\r\n      tile.remove();\r\n    });\r\n\r\n    this.cells.forEach(cell => cell.unlinkTile());\r\n  }\r\n}\r\n","let SCORE = 0;\r\n\r\nexport class Ceil {\r\n  constructor(gridElement, x, y) {\r\n    const cell = document.createElement(\"div\");\r\n    cell.classList.add('field-cell');\r\n    gridElement.append(cell);\r\n    this.x = x;\r\n    this.y = y;\r\n    this.score = 0;\r\n    this.gameScore = document.querySelector('.game-score');\r\n  }\r\n\r\n  linkTile(tile) {\r\n    tile.setXY(this.x, this.y);\r\n    this.linkedTile = tile;\r\n  }\r\n\r\n  unlinkTile() {\r\n    this.linkedTile = null;\r\n  }\r\n\r\n  isEmpty() {\r\n    return !this.linkedTile;\r\n  }\r\n\r\n  makeAnEmpty() {\r\n    SCORE = 0;\r\n    this.gameScore.innerHTML = SCORE;\r\n    return this.linkedTile = null;\r\n  }\r\n\r\n  linkTileForMerge(tile) {\r\n    tile.setXY(this.x, this.y);\r\n    this.linkedTileForMerge = tile;\r\n  }\r\n\r\n  unlinkTileForMerge() {\r\n    this.linkedTileForMerge = null;\r\n  }\r\n\r\n  hasTileForMerge() {\r\n    return !!this.linkedTileForMerge;\r\n  }\r\n\r\n  canAccept(newTile) {\r\n    return (\r\n      this.isEmpty() ||\r\n      (!this.hasTileForMerge() && this.linkedTile.value === newTile.value)\r\n    );\r\n  }\r\n\r\n  mergeTiles() {\r\n    if (this.linkedTile) {\r\n      const result = this.linkedTile.value + this.linkedTileForMerge.value;\r\n      this.linkedTile.setValue(result);\r\n\r\n      this.score += result;\r\n\r\n      if (SCORE < this.score) {\r\n        console.log(this.score)\r\n        SCORE = this.score;\r\n        this.gameScore.textContent = SCORE;\r\n      }\r\n\r\n      if (result >= 2048) {\r\n        const win = document.querySelector('.message-win');\r\n        win.classList.toggle('hidden');\r\n      }\r\n\r\n      this.linkedTileForMerge.removeFromDOM();\r\n      this.unlinkTileForMerge();\r\n    }\r\n  }\r\n}\r\n","const COLORS = {\n  2: '#eee4da',\n  4: '#ede0c8',\n  8: '#f2b179',\n  16: '#f59563',\n  32: '#f67c5f',\n  64: '#f65e3b',\n  128: '#edcf72',\n  256: '#edcc61',\n  512: '#edc850',\n  1024: '#edc53f',\n  2048: '#edc22e',\n};\n\nexport class Tile {\n  constructor(gridElement) {\n    this.tileElement = document.createElement('div');\n    this.tileElement.classList.add('tile');\n    this.setValue(Math.random() > 0.5 ? 2 : 4);\n    gridElement.append(this.tileElement);\n  }\n\n  setValue(value) {\n    this.value = value;\n    this.tileElement.textContent = value;\n    this.tileElement.style.setProperty('--bg-color', `${COLORS[value]}`);\n\n    this.tileElement.style.setProperty(\n      '--text-color',\n      `${value >= 8 ? '#f9f6f2' : '#776e65'}`,\n    );\n  }\n\n  setXY(x, y) {\n    this.x = x;\n    this.y = y;\n    this.tileElement.style.setProperty('--x', x);\n    this.tileElement.style.setProperty('--y', y);\n  }\n\n  removeFromDOM() {\n    this.tileElement.remove();\n  }\n\n  waitForTransitionEnd() {\n    return new Promise((resolve) => {\n      this.tileElement.addEventListener('transitionend', resolve, {\n        once: true,\n      });\n    });\n  }\n\n  waitForAnimationEnd() {\n    return new Promise((resolve) => {\n      this.tileElement.addEventListener('animationend', resolve, {\n        once: true,\n      });\n    });\n  }\n}\n"],"names":["$87cceec37ced91bf$var$SCORE","$87cceec37ced91bf$export$d4a1bccfd52ebd3","constructor","gridElement","x","y","cell","document","createElement","classList","add","append","score","gameScore","querySelector","linkTile","tile","setXY","linkedTile","unlinkTile","isEmpty","makeAnEmpty","innerHTML","linkTileForMerge","linkedTileForMerge","unlinkTileForMerge","hasTileForMerge","canAccept","newTile","value","mergeTiles","result","setValue","console","log","textContent","win","toggle","removeFromDOM","$a3a4bece0086b835$var$COLORS","$a3a4bece0086b835$export$235cb65c20ad2b7","tileElement","Math","random","style","setProperty","remove","waitForTransitionEnd","Promise","resolve","addEventListener","once","waitForAnimationEnd","$09e991522ca7e64e$var$gridElement","getElementById","$09e991522ca7e64e$var$lose","$09e991522ca7e64e$var$start","$09e991522ca7e64e$var$game","cells","i","$a5fd07fa01589658$var$GRID_SIZE","push","floor","cellsGroupedByColumn","groupCellsByColumn","cellsGroupedByReversedColumn","map","column","reverse","cellsGroupedByRow","groupCellsByRow","cellsGroupedByReversedRow","raw","getRandomEmptyCell","emptyCells","filter","randomIndex","length","reduce","groupedCells","moveUp","slideTiles","moveDown","moveLeft","moveRight","canMoveUp","canMove","canMoveDown","canMoveLeft","canMoveRight","some","group","canMoveInGroup","index","targetCell","promises","forEach","slideTilesInGroup","all","cellWithTile","j","start","restart","tiles","querySelectorAll","$09e991522ca7e64e$var$setupInputOnce","$09e991522ca7e64e$var$handleInput","event","key","$09e991522ca7e64e$var$button","contains","replace"],"version":3,"file":"index.07bbea65.js.map"}